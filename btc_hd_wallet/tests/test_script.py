import unittest
from io import BytesIO

from helper import hash160, sha256
from script import Script, p2sh_script, p2pkh_script, p2wpkh_script, p2wsh_script


class TestScript(unittest.TestCase):

    def test_repr(self):
        pub_key = "020bf81062796b773dcb4055dfab420ef92fa95ebd92426a994a464dec5b321004"
        pub_key_bytes = bytes.fromhex(pub_key)
        h160_pub_key = hash160(pub_key_bytes)

        script = p2wpkh_script(h160=h160_pub_key)
        self.assertEqual(str(script), "OP_0 6c743a71b8899dcd30882f5affa712e130339866")

        script = p2pkh_script(h160=h160_pub_key)
        self.assertEqual(str(script), "OP_DUP OP_HASH160 6c743a71b8899dcd30882f5affa712e130339866 OP_EQUALVERIFY OP_CHECKSIG")

        # still hashing pub key instead of script -> here it does not matter
        script = p2wsh_script(h256=sha256(pub_key_bytes))
        self.assertEqual(str(script), "OP_0 8634ffba92b015a6c13840d787a17a4a8c0e6c39aeeb56e3fd3d68d97ee2fbd8")

        script = p2sh_script(h160=h160_pub_key)
        self.assertEqual(str(script), "OP_HASH160 6c743a71b8899dcd30882f5affa712e130339866 OP_EQUAL")

    def test_equality(self):
        self.assertEqual(Script(), Script())
        script_pubkey = BytesIO(bytes.fromhex('6a47304402207899531a52d59a6de200179928ca900254a36b8dff8bb75f5f5d71b1cdc26125022008b422690b8461cb52c3cc30330b23d574351872b7c361e9aae3649071c1a7160121035d5c93d9ac96881f19ba1f686f15f009ded7c62efe85a872e6a19b43c15a2937'))
        script_pubkey1 = BytesIO(bytes.fromhex('6a47304402207899531a52d59a6de200179928ca900254a36b8dff8bb75f5f5d71b1cdc26125022008b422690b8461cb52c3cc30330b23d574351872b7c361e9aae3649071c1a7160121035d5c93d9ac96881f19ba1f686f15f009ded7c62efe85a872e6a19b43c15a2937'))
        self.assertEqual(Script.parse(script_pubkey), Script.parse(script_pubkey1))

    def test_add(self):
        script = Script([bytes.fromhex("6c743a71b8899dcd30882f5affa712e130339866"), 0xac])
        res = script + Script()
        self.assertEqual(script.cmds, res.cmds)

    def test_parse(self):
        script_pubkey = BytesIO(bytes.fromhex('6a47304402207899531a52d59a6de200179928ca900254a36b8dff8bb75f5f5d71b1cdc26125022008b422690b8461cb52c3cc30330b23d574351872b7c361e9aae3649071c1a7160121035d5c93d9ac96881f19ba1f686f15f009ded7c62efe85a872e6a19b43c15a2937'))
        script = Script.parse(script_pubkey)
        want = bytes.fromhex('304402207899531a52d59a6de200179928ca900254a36b8dff8bb75f5f5d71b1cdc26125022008b422690b8461cb52c3cc30330b23d574351872b7c361e9aae3649071c1a71601')
        self.assertEqual(script.cmds[0].hex(), want.hex())
        want = bytes.fromhex('035d5c93d9ac96881f19ba1f686f15f009ded7c62efe85a872e6a19b43c15a2937')
        self.assertEqual(script.cmds[1], want)

        script_hex = "fd54014c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004dac"
        script = Script.parse(BytesIO(bytes.fromhex(script_hex)))
        self.assertEqual(script.cmds, Script([76 * b"\x00", 257 * b"\x01", b"\xac"]).cmds)

        script_bytes = bytes.fromhex("17a9149f324c49095c56cdcb037ec416da4db9b74ffc5a87")
        script = Script.parse(BytesIO(script_bytes))
        self.assertEqual(script.serialize(), script_bytes)

    def test_serialize(self):
        want = '6a47304402207899531a52d59a6de200179928ca900254a36b8dff8bb75f5f5d71b1cdc26125022008b422690b8461cb52c3cc30330b23d574351872b7c361e9aae3649071c1a7160121035d5c93d9ac96881f19ba1f686f15f009ded7c62efe85a872e6a19b43c15a2937'
        script_pubkey = BytesIO(bytes.fromhex(want))
        script = Script.parse(script_pubkey)
        self.assertEqual(script.serialize().hex(), want)

        want = "fd52014c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d
        script = Script([76 * b"\x00", 257 * b"\x01"])
        self.assertEqual(script.serialize().hex(), want)

        with self.assertRaises(ValueError):
            Script([521 * b"\x00"]).serialize()
